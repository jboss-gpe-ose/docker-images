batch
/subsystem=jacorb:remove
/subsystem=jaxr:remove
/interface=unsecure:remove
/socket-binding-group=standard-sockets/socket-binding=jacorb:remove
/socket-binding-group=standard-sockets/socket-binding=jacorb-ssl:remove
/socket-binding-group=standard-sockets/socket-binding=messaging-backup:add(port=5545)
/subsystem=messaging/hornetq-server=default:remove
/subsystem=messaging/hornetq-server=default:add

##########   Default Broker ##############
/subsystem=messaging/hornetq-server=default:write-attribute(name=backup,value=false)

# ensure that backup broker wakes up if live broker goes dies on normal shutdown of container
/subsystem=messaging/hornetq-server=default:write-attribute(name=failover-on-shutdown,value=true)

# no need to always return to the original live broker
/subsystem=messaging/hornetq-server=default:write-attribute(name=allow-failback,value=false)

# will use shared storage rather than replication failover mode
/subsystem=messaging/hornetq-server=default:write-attribute(name=shared-store,value=true)

/subsystem=messaging/hornetq-server=default:write-attribute(name=persistence-enabled,value=true)
/subsystem=messaging/hornetq-server=default:write-attribute(name=clustered,value=true)
/subsystem=messaging/hornetq-server=default:write-attribute(name=cluster-password,value=mycluster)
/subsystem=messaging/hornetq-server=default:write-attribute(name=message-counter-enabled,value=true)
/subsystem=messaging/hornetq-server=default:write-attribute(name=journal-type,value=NIO)
/subsystem=messaging/hornetq-server=default:write-attribute(name=journal-min-files,value=2)
/subsystem=messaging/hornetq-server=default/path=journal-directory:add(path="@@HQ_SHARED_JOURNAL_DIR@@/${hornetq.node}/journal")
/subsystem=messaging/hornetq-server=default/path=paging-directory:add(path="@@HQ_SHARED_JOURNAL_DIR@@/${hornetq.node}/paging")
/subsystem=messaging/hornetq-server=default/path=bindings-directory:add(path="@@HQ_SHARED_JOURNAL_DIR@@/${hornetq.node}/bindings")
/subsystem=messaging/hornetq-server=default/path=large-messages-directory:add(path="@@HQ_SHARED_JOURNAL_DIR@@/${hornetq.node}/large-messages")
/subsystem=messaging/hornetq-server=default/in-vm-connector=in-vm:add(server-id=1)
/subsystem=messaging/hornetq-server=default/in-vm-acceptor=in-vm:add(server-id=1)
/subsystem=messaging/hornetq-server=default/remote-connector=netty:add(socket-binding="messaging")
/subsystem=messaging/hornetq-server=default/remote-acceptor=netty:add(socket-binding="messaging")
/subsystem=messaging/hornetq-server=default/security-setting=#:add
/subsystem=messaging/hornetq-server=default/security-setting=#/role=guest:add(send=true,consume=true,create-non-durable-queue=true,delete-non-durable-queue=true)
/subsystem=messaging/hornetq-server=default/address-setting=#:add(dead-letter-address="jms.queue.DLQ",expiry-address="jms.queue.ExpiryQueue",redelivery-delay=0,max-size-bytes=10485760,address-full-policy=BLOCK,message-counter-history-day-limit=10,redistribution-delay=0)
/subsystem=messaging/hornetq-server=default/connection-factory=RemoteConnectionFactory:add(connector={netty=placeholder},entries=[java:jboss/exported/jms/RemoteConnectionFactory])
/subsystem=messaging/hornetq-server=default/connection-factory=InVmConnectionFactory:add(connector={in-vm=placeholder},entries=["java:/ConnectionFactory"])
/subsystem=messaging/hornetq-server=default/pooled-connection-factory=hornetq-ra:add(connector={in-vm=placeholder},transaction=xa,entries=["java:/JmsXA"])
/subsystem=messaging/hornetq-server=default/connection-factory=RemoteConnectionFactory:write-attribute(name=ha,value=true)
/subsystem=messaging/hornetq-server=default/connection-factory=RemoteConnectionFactory:write-attribute(name=reconnect-attempts,value=-1)

# configure broker discovery such that it uses jgroups
/subsystem=messaging/hornetq-server=default/broadcast-group=bg-group1:add(broadcast-period=5000,connectors=[netty])
/subsystem=messaging/hornetq-server=default/broadcast-group=bg-group1:write-attribute(name=jgroups-stack,value=tcp)
/subsystem=messaging/hornetq-server=default/broadcast-group=bg-group1:write-attribute(name=jgroups-channel,value=${hornetq.node})
/subsystem=messaging/hornetq-server=default/discovery-group=dg-group1:add(refresh-timeout=10000)
/subsystem=messaging/hornetq-server=default/discovery-group=dg-group1:write-attribute(name=jgroups-stack,value=tcp)
/subsystem=messaging/hornetq-server=default/discovery-group=dg-group1:write-attribute(name=jgroups-channel,value=${hornetq.node})
/subsystem=messaging/hornetq-server=default/cluster-connection=mycluster:add(connector-ref=netty,discovery-group-name=dg-group1,cluster-connection-address=jms)
/subsystem=messaging/hornetq-server=default/cluster-connection=mycluster:write-attribute(name=forward-when-no-consumers,value=false)
/subsystem=messaging/hornetq-server=default/cluster-connection=mycluster:write-attribute(name=use-duplicate-detection,value=true)

# Set PAGE policy for KIE queues
/subsystem=messaging/hornetq-server=default/address-setting=KIE.#:add(dead-letter-address="jms.queue.DLQ",expiry-address="jms.queue.ExpiryQueue",redelivery-delay=0,max-size-bytes=10485760,page-size-bytes=1048576,address-full-policy=PAGE,message-counter-history-day-limit=10,redistribution-delay=0)
##########################################




##########   backup Broker ##############
/subsystem=messaging/hornetq-server=backup:add
/subsystem=messaging/hornetq-server=backup:write-attribute(name=backup,value=true)
/subsystem=messaging/hornetq-server=backup:write-attribute(name=clustered,value=true)
/subsystem=messaging/hornetq-server=backup:write-attribute(name=cluster-password,value=mycluster)
/subsystem=messaging/hornetq-server=backup:write-attribute(name=message-counter-enabled,value=true)
/subsystem=messaging/hornetq-server=backup:write-attribute(name=persistence-enabled,value=true)
/subsystem=messaging/hornetq-server=backup:write-attribute(name=shared-store,value=true)
/subsystem=messaging/hornetq-server=backup:write-attribute(name=failover-on-shutdown,value=false)
/subsystem=messaging/hornetq-server=backup:write-attribute(name=allow-failback,value=true)
/subsystem=messaging/hornetq-server=backup:write-attribute(name=journal-type,value=NIO)
/subsystem=messaging/hornetq-server=backup:write-attribute(name=journal-min-files,value=2)
/subsystem=messaging/hornetq-server=backup/path=journal-directory:add(path="@@HQ_SHARED_JOURNAL_DIR@@/${hornetq.backup.node}/journal")
/subsystem=messaging/hornetq-server=backup/path=paging-directory:add(path="@@HQ_SHARED_JOURNAL_DIR@@/${hornetq.backup.node}/paging")
/subsystem=messaging/hornetq-server=backup/path=bindings-directory:add(path="@@HQ_SHARED_JOURNAL_DIR@@/${hornetq.backup.node}/bindings")
/subsystem=messaging/hornetq-server=backup/path=large-messages-directory:add(path="@@HQ_SHARED_JOURNAL_DIR@@/${hornetq.backup.node}/large-messages")
/subsystem=messaging/hornetq-server=backup/in-vm-connector=in-vm:add(server-id=2)
/subsystem=messaging/hornetq-server=backup/in-vm-acceptor=in-vm:add(server-id=2)
/subsystem=messaging/hornetq-server=backup/remote-connector=netty:add(socket-binding="messaging-backup")
/subsystem=messaging/hornetq-server=backup/remote-acceptor=netty:add(socket-binding="messaging-backup")
/subsystem=messaging/hornetq-server=backup/security-setting=#:add
/subsystem=messaging/hornetq-server=backup/security-setting=#/role=guest:add(send=true,consume=true,create-non-durable-queue=true,delete-non-durable-queue=true)
/subsystem=messaging/hornetq-server=backup/address-setting=#:add(dead-letter-address="jms.queue.DLQ",expiry-address="jms.queue.ExpiryQueue",redelivery-delay=0,max-size-bytes=10485760,address-full-policy=BLOCK,message-counter-history-day-limit=10,redistribution-delay=0)
#/subsystem=messaging/hornetq-server=backup/connection-factory=RemoteConnectionFactory:add(connector={netty=placeholder},entries=[java:jboss/exported/jms/RemoteConnectionFactory])
#/subsystem=messaging/hornetq-server=backup/connection-factory=InVmConnectionFactory:add(connector={in-vm=placeholder},entries=["java:/ConnectionFactory"])
#/subsystem=messaging/hornetq-server=backup/pooled-connection-factory=hornetq-ra:add(connector={in-vm=placeholder},transaction=xa,entries=["java:/JmsXA"])


# Configure broker discovery such that it uses jgroups
/subsystem=messaging/hornetq-server=backup/broadcast-group=bg-group1:add(broadcast-period=5000,connectors=[netty])
/subsystem=messaging/hornetq-server=backup/broadcast-group=bg-group1:write-attribute(name=jgroups-stack,value=tcp)
/subsystem=messaging/hornetq-server=backup/broadcast-group=bg-group1:write-attribute(name=jgroups-channel,value=${hornetq.backup.node})
/subsystem=messaging/hornetq-server=backup/discovery-group=dg-group1:add(refresh-timeout=10000)
/subsystem=messaging/hornetq-server=backup/discovery-group=dg-group1:write-attribute(name=jgroups-stack,value=tcp)
/subsystem=messaging/hornetq-server=backup/discovery-group=dg-group1:write-attribute(name=jgroups-channel,value=${hornetq.backup.node})
/subsystem=messaging/hornetq-server=backup/cluster-connection=mycluster:add(connector-ref=netty,discovery-group-name=dg-group1,cluster-connection-address=jms)
/subsystem=messaging/hornetq-server=backup/cluster-connection=mycluster:write-attribute(name=forward-when-no-consumers,value=false)
/subsystem=messaging/hornetq-server=backup/cluster-connection=mycluster:write-attribute(name=use-duplicate-detection,value=true)

# Set PAGE policy for KIE queues
/subsystem=messaging/hornetq-server=backup/address-setting=KIE.#:add(dead-letter-address="jms.queue.DLQ",expiry-address="jms.queue.ExpiryQueue",redelivery-delay=0,max-size-bytes=10485760,page-size-bytes=1048576,address-full-policy=PAGE,message-counter-history-day-limit=10,redistribution-delay=0)
##########################################

run-batch
